<?php
$path="./../../../vendor/mevdschee/php-crud-api";
$recordsPath=$path.'/tests/functional/001_records';
$recordsTests = array_diff(scandir($recordsPath), array('.', '..'));
$tests=[];
function startsWith( $haystack, $needle ) {
    return substr( $haystack, 0, strlen( $needle ) ) === $needle;
}
function runTest($file,$category,$driver, $testFunction): array
{
    $success = 1;
    $skipped = 0;
    $failed = 0;
    $title = ucwords(str_replace('_', ' ', $category)) . '/';
    $title .= ucwords(str_replace('_', ' ', substr(basename($file), 0, -4)));
    $line1 = "=====[$title]=====";
    $len = strlen($line1);
    $line2 = str_repeat("=", $len);
    $parts = preg_split('/^[=]+([\r\n]+|$)/m', file_get_contents($file));
    $headers = explode("\n", $parts[0]);
    foreach ($headers as $header) {
        if (!strpos($header, ':')) {
            continue;
        }
        list($key, $value) = explode(':', strtolower($header));
        if ($key == "skip-for-$driver") {
            $skipped = 1;
            $success = 0;
        }
        if ($key == "skip-always") {
            $skipped = 1;
            $success = 0;
        }
    }
    if (!$skipped) {
        $dirty = false;
        for ($i = 1; $i < count($parts); $i += 2) {
            $recording = false;
            if (empty($parts[$i + 1])) {
                if (substr($parts[$i], -1) != "\n") {
                    $parts[$i] .= "\n";
                }
                $parts[$i + 1] = '';
                $recording = true;
                $dirty = true;
            }
            $in = $parts[$i];
            $exp = $parts[$i + 1];
            /*$api = new Api($config);
            $_SERVER['REMOTE_ADDR'] = 'TEST_IP';
            $out = ResponseUtils::toString($api->handle(RequestFactory::fromString($in)));*/
            $out=$testFunction($in,$exp);
            if ($recording) {
                $parts[$i + 1] = $out;
            } else if ($out != $exp) {
                //echo "$line1\n$exp\n$line2\n$out\n$line2\n";
                $failed = 1;
                $success = 0;
            }
        }
        if ($dirty) {
            file_put_contents($file, implode("===\n", $parts));
        }
    }
    return compact('success', 'skipped', 'failed');
}

$files=[];
array_walk(
    $recordsTests,
    function($v) use (&$files,$recordsPath) {
        //$c=explode("\n",file_get_contents($recordsPath.'/'.$v));
        //if (!startsWith($c[0],'skip-for-sqlite')) $tests[]=parse($c);
        $files[]=$recordsPath.'/'.$v;
    });

$fTest=function ($in, $exp) {
    $i=explode("\n",$in);
    array_pop($i);
    $e=explode("\n",$exp);
    array_pop($e);
    $pin= parseIn($i);    
    $pexp= parseExp($e);    
    $res= [$pin,$pexp];
    print_r($res);
    return $res;
};
function parseExp($exp) {
    $res=new stdClass();
    $res->toSkip=count($exp)!==5;
    if (count($exp)===5) {
        $res->status=$exp[0];
        $res->contentType=$exp[1];
        $res->contentLength=$exp[2];
        $res->output=$exp[4];
    }
    return $res;
}
function parseQuery($q) {
    $res=new stdClass();
    $res->query=$q;
    $res->onError=false;
    $res->rest0=null;
    $res->rest=null;
    $toSkip=[
        'GET /postzzz',
        'GET http://localhost/records/posts'
    ];
    $res->toskip= (in_array($q,$toSkip));
    //
    $withQuestionMark=strpos($q,'?');
    $query=explode(' ',$q);
    $res->method=$query[0];
    $args=explode('/',$query[1]);
    $res->hasRecords=$args[1]==='records';
    
    if (count($args)===3) {
        if ($res->hasRecords) {
            if ($withQuestionMark) {
                $r=explode('?',$args[2]);
                $res->tableName=$r[0];
                $res->rest=$r[1];
            } else {
                $res->tableName=$args[2];
            }
        } else {
            $res->onError=true;
        }
    } else if (count($args)===4) {
        if ($res->hasRecords) {
            if ($withQuestionMark) {
                $res->tablename=$args[2];
                $r=explode('?',$args[3]);
                $res->rest0=$r[0];
                $res->rest=$r[1];
            } else {
                $res->tableName=$args[2];
                $res->rest0=$args[3];
            }
        } else {
            $res->onError=true;
        }
    } else {
        $res->onError=true;
    }
    return $res;
}
function parseIn($in) {
    /*$last= (count($in)!==1)?$in[count($in)-1]:'';
    if (strpos($last,'?')===FALSE) {
        
    } else {
        
    }*/
    $r= parseQuery($in[0]);
    $r->in=$in;
    $r->qdata=count($in)!==1?$in[count($in)-1]:null;
    return $r;
}
foreach ($files as $file) {
    runTest($file,'cat','sqlite',$fTest);
}